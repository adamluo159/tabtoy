// Generated by github.com/adamluo159/tabtoy
// Version: 
// DO NOT EDIT!!
#include <vector>
#include <map>
#include <string>

namespace table
{
	
	// Defined in table: Globals
	enum class ActorType
	{
		
		
		Leader = 0, // 唐僧
		
		
		Monkey = 1, // 孙悟空
		
		
		Pig = 2, // 猪八戒
		
		
		Hammer = 3, // 沙僧
	
	};
	

	

	
	

	

	// Defined in table: Globals
	class Vec2
	{
	public:
	
		
		public:
 		int X_ = 0; 
	
		
		public:
 		int Y_ = 0; 
	

	}; 
	

	

	// Defined in table: AAA
	class AAADefine
	{
	public:
	
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public:
 		int ID_ = 0; 
	
		/// <summary> 
		/// 名称
		/// </summary>
		public:
 		std::string Name_ = ""; 
	
		/// <summary> 
		/// 名称
		/// </summary>
		public:
 		std::string SSS_ = ""; 
	
		
		public:
 		Vec2 DDD_; 
	

	}; 
	

	
	

	// Defined in table: Config	
	class Config
	{
	
	public:
		tabtoy::Logger TableLogger;
	
		
		/// <summary> 
		/// AAA
		/// </summary>
		public:
 		std::vector<AAADefine> AAA_; 
	
	
		//#region Index code
	 	std::map<int, AAADefine> _AAAByID;
	public:
		class AAADefine* GetAAAByID(int ID, AAADefine* def = nullptr)
        {
            auto ret = _AAAByID.find( ID );
            if ( ret != _AAAByID.end() )
            {
                return &ret->second;
            }
			
			if ( def == nullptr )
			{
				TableLogger.ErrorLine("GetAAAByID failed, ID: %s", ID);
			}

            return def;
        }
		
	
		//#endregion
		//#region Deserialize code
		
	public:
		static void Deserialize( Config& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.AAA_.emplace_back( reader.ReadStruct<AAADefine>(Deserialize) );
                	}
                	break; 
                }
             }

			
			// Build AAA Index
			for( size_t i = 0;i< ins.AAA_.size();i++)
			{
				auto element = ins.AAA_[i];
				
				ins._AAAByID.emplace(std::make_pair(element.ID_, element));
				
			}
			
		}
	public:
		static void Deserialize( Vec2& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.X_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Y_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( AAADefine& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name_ = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.SSS_ = reader.ReadString();
                	}
                	break; 
                	case 0x90003:
                	{
						ins.DDD_ = reader.ReadStruct<Vec2>(Deserialize);
                	}
                	break; 
                }
             }

			
		}
		//#endregion
	

	};
	
	
	
	
	
	
}
