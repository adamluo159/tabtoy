package printer

import (
	"text/template"

	"github.com/adamluo159/tabtoy/v2/i18n"
	"github.com/adamluo159/tabtoy/v2/model"
)

// TODO pbmeta解析换rune的lexer [tabtoy] {{.Comment}}
const typeScriptTemplate = `// Generated by github.com/adamluo159/tabtoy
// Version: {{.ToolVersion}}
// DO NOT EDIT!!
export namespace {{.Package}} {
	{{range .Enums}}
// Defined in table: {{.DefinedTable}}
	export enum {{.Name}}{
	{{range .ProtoFields}}
		{{.Alias}}
		{{.Name}} = {{.Number}}, {{.Comment}}
	{{end}}
	}
	export const {{.Name}}Name: { [k:number]: string } = {
		{{range .ProtoFields}}
		{{.Number}}: "{{.CommentValue}}",
		{{end}}
	}
	{{end}}
	{{range .Messages}}
	// Defined in table: {{.DefinedTable}}
	{{$iName := .Name}}
	export interface {{$iName}} {
	{{range .ProtoFields}}	
		{{.Name}}:{{.TsTypeString}}{{.Label}}; {{.Comment}} {{.Alias}}
	{{if .IsHeadTable}} 	{{.Name}}ByID?:{ [k:number]: {{.TsTypeString}} };  {{end}} {{end}}
	}
{{end}}
}
`

var tableName string = ""

type typeScriptFieldDescriptor struct {
	*model.FieldDescriptor

	d *typeScriptDescriptor

	Number int
}

func (self typeScriptFieldDescriptor) IsHeadTable() bool {
	return self.d.Name == tableName
}

func (self typeScriptFieldDescriptor) Label() string {
	if self.IsRepeated {
		return "[]"
	}
	return ""
}

func (self typeScriptFieldDescriptor) Alias() string {
	if self.FieldDescriptor.Meta.GetString("Alias") == "" {
		return ""
	}
	return "// " + self.FieldDescriptor.Meta.GetString("Alias")
}

func (self typeScriptFieldDescriptor) CommentValue() string {
	if self.FieldDescriptor.Comment == "" {
		return self.FieldDescriptor.Meta.GetString("Alias")
	}
	return self.FieldDescriptor.Comment
}

func (self typeScriptFieldDescriptor) Comment() string {
	if self.FieldDescriptor.Comment == "" {
		return ""
	}
	return "// " + self.FieldDescriptor.Comment
}

type typeScriptDescriptor struct {
	*model.Descriptor

	ProtoFields []typeScriptFieldDescriptor

	file *typeScriptFileModel
}

func (self *typeScriptDescriptor) DefinedTable() string {
	return self.File.Name
}

type typeScriptFileModel struct {
	Package     string
	ToolVersion string
	Messages    []typeScriptDescriptor
	Enums       []typeScriptDescriptor
}

type typeScriptPrinter struct {
}

func (self *typeScriptPrinter) Run(g *Globals) *Stream {

	tpl, err := template.New("ts").Parse(typeScriptTemplate)
	if err != nil {
		log.Errorln(err)
		return nil
	}
	tableName = g.CombineStructName

	var m typeScriptFileModel

	m.Package = g.FileDescriptor.Pragma.GetString("Package")
	m.ToolVersion = g.Version

	// 遍历所有类型
	for _, d := range g.FileDescriptor.Descriptors {

		// 这给被限制输出
		if !d.File.MatchTag(".proto") {
			log.Infof("%s: %s", i18n.String(i18n.Printer_IgnoredByOutputTag), d.Name)
			continue
		}

		var protoD typeScriptDescriptor
		protoD.Descriptor = d
		protoD.file = &m

		// 遍历字段
		for index, fd := range d.Fields {

			// 对CombineStruct的XXDefine对应的字段
			if d.Usage == model.DescriptorUsage_CombineStruct {

				// 这个字段被限制输出
				if fd.Complex != nil && !fd.Complex.File.MatchTag(".proto") {
					continue
				}
			}

			var field typeScriptFieldDescriptor
			field.FieldDescriptor = fd
			field.d = &protoD

			switch d.Kind {
			case model.DescriptorKind_Struct:
				field.Number = index + 1
			case model.DescriptorKind_Enum:
				field.Number = int(fd.EnumValue)
			}

			protoD.ProtoFields = append(protoD.ProtoFields, field)

		}

		switch d.Kind {
		case model.DescriptorKind_Struct:
			m.Messages = append(m.Messages, protoD)
		case model.DescriptorKind_Enum:
			m.Enums = append(m.Enums, protoD)
		}

	}

	bf := NewStream()

	err = tpl.Execute(bf.Buffer(), &m)
	if err != nil {
		log.Errorln(err)
		return nil
	}

	return bf
}
func init() {

	RegisterPrinter("typescript", &typeScriptPrinter{})

}
